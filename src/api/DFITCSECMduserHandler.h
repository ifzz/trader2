#ifndef _DFITC_SEC_MDUSER_HANDLER_H_
#define _DFITC_SEC_MDUSER_HANDLER_H_
#include "DFITCSECApiDataType.h"
#include "DFITCSECApiStruct.h"
#include "DFITCSECMdApi.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef struct dfitc_sec_mduser_api_cb_def dfitc_sec_mduser_api_cb;

struct dfitc_sec_mduser_api_cb_def{
  void (*xOnFrontConnected)(void* arg);
  void (*xOnFrontDisconnected)(void* arg, int nReason);
  void (*xOnRspUserLogin)(void* arg, DFITCSECRspUserLoginField * pRspUserLogin, DFITCSECRspInfoField * pRspInfo);
  void (*xOnRspUserLogout)(void* arg, DFITCSECRspUserLogoutField * pRspUsrLogout, DFITCSECRspInfoField * pRspInfo);
  void (*xOnRtnDepthMarketData)(void* arg, DFITCSOPDepthMarketDataField * pMarketDataField);
  void (*xOnRspError)(void* arg, DFITCSECRspInfoField *pRspInfo);
  void (*xOnRspSubMarketData)(void* arg, DFITCSECSpecificInstrumentField * pSpecificInstrument, DFITCSECRspInfoField * pRspInfo);
  void (*xOnRspUnSubMarketData)(void* arg, DFITCSECSpecificInstrumentField * pSpecificInstrument, DFITCSECRspInfoField * pRspInfo);
};
#ifdef __cplusplus
}
#endif

class CDfitcSecMduserHandler : public DFITCSECMdSpi
{
public:
  CDfitcSecMduserHandler(dfitc_sec_mduser_api_cb *pUserCb, void * parent);
  ~CDfitcSecMduserHandler();

  /** 
  * 网络连接正常响应
  */
  void OnFrontConnected();

  /**
  * 网络连接不正常响应
  */
  void OnFrontDisconnected(int nReason);

  /**
  * SEC-消息通知
  */
  virtual void OnRtnNotice(DFITCSECRspNoticeField *pNotice) {};

  /**
  * ERR-错误应答
  * @param pRspInfo:若请求失败，返回错误信息地址
  */
  void OnRspError(DFITCSECRspInfoField *pRspInfo);

  /**
  * STOCK-登录响应
  * @param pRspUserLogin:指针若非空,返回用户登录响应信息结构地址,表明登录请求成功
  * @param pRspInfo::指针若非空，返回错误信息地址，表明登录请求失败
  */
  virtual void OnRspStockUserLogin(DFITCSECRspUserLoginField * pRspUserLogin, DFITCSECRspInfoField * pRspInfo) {}

  /**
  * STOCK-登出响应
  * @param pRspUsrLogout:指针若非空,返回用户登出响应信息结构地址,表明登出请求成功
  * @param pRspInfo:指针若非空，返回错误信息地址，表明登出请求失败
  */
  virtual void OnRspStockUserLogout(DFITCSECRspUserLogoutField * pRspUsrLogout, DFITCSECRspInfoField * pRspInfo) {}

  /**
  * SOP-登录响应
  * @param pRspUserLogin:指针若非空,返回用户登录响应信息结构地址,表明登录请求成功
  * @param pRspInfo:指针若非空，返回错误信息地址，表明登录请求失败
  */
  void OnRspSOPUserLogin(DFITCSECRspUserLoginField * pRspUserLogin, DFITCSECRspInfoField * pRspInfo);

  /**
  * SOP-登出响应
  * @param pRspUsrLogout:指针若非空,返回用户登出响应信息结构地址,表明登出请求成功
  * @param pRspInfo:指针若非空，返回错误信息地址，表明登出请求失败
  */
  void OnRspSOPUserLogout(DFITCSECRspUserLogoutField * pRspUsrLogout, DFITCSECRspInfoField * pRspInfo);

  /**
  * FASL-登录响应
  * @param pRspUserLogin:指针若非空,返回用户登录响应信息结构地址,表明登录请求成功
  * @param pRspInfo:指针若非空，返回错误信息地址，表明登录请求失败
  */
  virtual void OnRspFASLUserLogin(DFITCSECRspUserLoginField * pRspUserLogin, DFITCSECRspInfoField * pRspInfo) {}

  /**
  * FASL-登出响应
  * @param pRspUsrLogout:指针若非空,返回用户登出响应信息结构地址,表明登出请求成功
  * @param pRspInfo:指针若非空，返回错误信息地址，表明登出请求失败
  */
  virtual void OnRspFASLUserLogout(DFITCSECRspUserLogoutField * pRspUsrLogout, DFITCSECRspInfoField * pRspInfo) {}

  /**
  * STOCK-行情订阅响应
  * @param pSpecificInstrument:指针若非空,返回用户指定合约行情订阅响应结构地址,表明指定合约行情订阅成功
  * @param pRspInfo:指针若非空，返回错误信息地址，表明指定合约行情订阅失败
  */
  virtual void OnRspStockSubMarketData(DFITCSECSpecificInstrumentField * pSpecificInstrument, DFITCSECRspInfoField * pRspInfo) {}

  /**
  * STOCK-取消订阅行情响应
  * @param pSpecificInstrument:指针若非空,返回用户指定合约行情取消订阅响应结构地址,表明指定合约行情取消订阅成功
  * @param pRspInfo:指针若非空，返回错误信息地址，表明指定合约行情取消订阅失败
  */
  virtual void OnRspStockUnSubMarketData(DFITCSECSpecificInstrumentField * pSpecificInstrument, DFITCSECRspInfoField * pRspInfo) {}

  /**
  * SOP-行情订阅响应
  * @param pSpecificInstrument:指针若非空,返回用户指定合约行情订阅响应结构地址,表明指定合约行情订阅成功
  * @param pRspInfo:指针若非空，返回错误信息地址，表明指定合约行情订阅失败
  */
  void OnRspSOPSubMarketData(DFITCSECSpecificInstrumentField * pSpecificInstrument, DFITCSECRspInfoField * pRspInfo);

  /**
  * SOP-取消订阅行情响应
  * @param pSpecificInstrument:指针若非空,返回用户指定合约行情取消订阅响应结构地址,表明指定合约行情取消订阅成功
  * @param pRspInfo:指针若非空，返回错误信息地址，表明指定合约行情取消订阅失败
  */
  void OnRspSOPUnSubMarketData(DFITCSECSpecificInstrumentField * pSpecificInstrument, DFITCSECRspInfoField * pRspInfo);

  /**
  * STOCK-行情推送响应
  * @param pMarketDataField:指针若非空,返回行情推送响应结构地址
  */
  virtual void OnStockMarketData(DFITCStockDepthMarketDataField * pMarketDataField) {}

  /**
  * SOP-行情推送响应
  * @param pMarketDataField:指针若非空,返回行情推送响应结构地址
  */
  void OnSOPMarketData(DFITCSOPDepthMarketDataField * pMarketDataField);

  /**
  * STOCK-可用行情响应
  * @param pAvailableQuotInfo:指针若非空,返回可用的行情信息
  * @param pRspInfo:指针若非空，返回错误信息地址，表明指定合约行情取消订阅失败
  * @param flag  为真是标示最后一条，为假时表示还有后续。
  */
  virtual void OnRspStockAvailableQuot(DFITCRspQuotQryField * pAvailableQuotInfo, DFITCSECRspInfoField * pRspInfo,bool flag) {}

  /**
  * SOP-可用行情响应
  * @param pAvailableQuotInfo:指针若非空,返回可用的行情信息
  * @param pRspInfo:指针若非空，返回错误信息地址，表明指定合约行情取消订阅失败
  * @param flag  为真是标示最后一条，为假时表示还有后续。
  */
  virtual void OnRspSopAvailableQuot(DFITCRspQuotQryField * pAvailableQuotInfo, DFITCSECRspInfoField * pRspInfo,bool flag) {}

  /**
  * 密码更新请求响应
  * @param pMDPasswordUpdate:指针若非空,返回用户行情密码响应信息结构地址,表明密码修改成功。
  * @param pRspInfo:指针若非空，返回错误信息地址，表明密码修改失败。
  */
  virtual void OnRspUserMDPasswordUpdate(DFITCSECRspMDPasswordUpdateField *pMDPasswordUpdate,DFITCSECRspInfoField * pRspInfo){}

  private:
  dfitc_sec_mduser_api_cb *m_pUserCb;
  void * m_parent;
};

#endif // _DFITC_SEC_MDUSER_HANDLER_H_
